# Generated by Django 5.2 on 2025-04-27 16:22

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('challenges', '0001_initial'),
        ('learning', '0003_skill_is_active'),
        ('study', '0006_userquestionattempt_conversation_session'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='userskillproficiency',
            options={'ordering': ['user', 'skill__name'], 'verbose_name': 'User Skill Proficiency', 'verbose_name_plural': 'User Skill Proficiencies'},
        ),
        migrations.AddField(
            model_name='userquestionattempt',
            name='challenge_attempt',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_question_attempts_in_challenge', to='challenges.challengeattempt', verbose_name='challenge participation'),
        ),
        migrations.AddField(
            model_name='userquestionattempt',
            name='emergency_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='question_attempts', to='study.emergencymodesession', verbose_name='emergency mode session'),
        ),
        migrations.AlterField(
            model_name='conversationmessage',
            name='related_question',
            field=models.ForeignKey(blank=True, help_text='Optional link to a specific question discussed in the message.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='learning.question', verbose_name='related question'),
        ),
        migrations.AlterField(
            model_name='conversationsession',
            name='current_topic_question',
            field=models.ForeignKey(blank=True, help_text="The question/concept currently being discussed for 'Got It' testing.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='learning.question', verbose_name='current topic question'),
        ),
        migrations.AlterField(
            model_name='emergencymodesession',
            name='suggested_plan',
            field=models.JSONField(blank=True, help_text='Stores plan details: {"focus_skills": ["slug1", ...], "recommended_questions": N, ...}', null=True, verbose_name='suggested plan'),
        ),
        migrations.AlterField(
            model_name='test',
            name='configuration',
            field=models.JSONField(blank=True, help_text="JSON defining rules (e.g., {'num_questions_per_skill': {...}, 'total_questions': N}) for dynamically generating tests based on this template if 'is_predefined' is false.", null=True, verbose_name='dynamic configuration template'),
        ),
        migrations.AlterField(
            model_name='test',
            name='is_predefined',
            field=models.BooleanField(default=False, help_text="If true, this definition uses the specific questions linked below. If false, it acts as a template and relies on 'configuration'.", verbose_name='is predefined'),
        ),
        migrations.AlterField(
            model_name='userquestionattempt',
            name='conversation_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='study.conversationsession', verbose_name='conversation session'),
        ),
        migrations.AlterField(
            model_name='userquestionattempt',
            name='mode',
            field=models.CharField(choices=[('traditional', 'Traditional Learning'), ('level_assessment', 'Level Assessment'), ('test', 'Practice Test/Simulation'), ('emergency', 'Emergency Mode'), ('conversation', 'Learning via Conversation'), ('challenge', 'Challenge')], db_index=True, help_text='The context (feature) in which the question was attempted.', max_length=20, verbose_name='mode'),
        ),
        migrations.AlterField(
            model_name='userskillproficiency',
            name='proficiency_score',
            field=models.FloatField(default=0.0, help_text='User mastery score (0.0 to 1.0). Updated after attempts.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Proficiency Score'),
        ),
        migrations.AlterField(
            model_name='usertestattempt',
            name='completion_points_awarded',
            field=models.BooleanField(default=False, help_text='Tracks if gamification points for completing this test have been awarded (managed by signals/tasks).', verbose_name='completion points awarded'),
        ),
        migrations.AlterField(
            model_name='usertestattempt',
            name='question_ids',
            field=models.JSONField(default=list, help_text='Ordered list of question primary keys included in this attempt.', verbose_name='question IDs'),
        ),
        migrations.AlterField(
            model_name='usertestattempt',
            name='results_summary',
            field=models.JSONField(blank=True, help_text='Detailed breakdown, e.g., {"subsection_slug": {"correct": X, "total": Y, "score": Z, "name": "Sub Name"}}', null=True, verbose_name='results summary'),
        ),
        migrations.AlterField(
            model_name='usertestattempt',
            name='test_configuration',
            field=models.JSONField(blank=True, help_text='Actual configuration used for this specific instance (especially if dynamic/custom). Includes criteria like sections, skills, starred, not_mastered, num_questions, etc. Ensure consistent structure.', null=True, verbose_name='test configuration snapshot'),
        ),
        migrations.AddConstraint(
            model_name='userquestionattempt',
            constraint=models.UniqueConstraint(condition=models.Q(('challenge_attempt__isnull', False)), fields=('user', 'question', 'challenge_attempt'), name='unique_user_question_per_challenge_attempt'),
        ),
    ]
