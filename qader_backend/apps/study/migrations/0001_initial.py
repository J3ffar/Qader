# Generated by Django 5.2 on 2025-04-17 14:22

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('learning', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('test_type', models.CharField(choices=[('level_assessment_template', 'Level Assessment Template'), ('practice_set', 'Practice Set'), ('simulation', 'Full Simulation')], db_index=True, default='practice_set', max_length=30, verbose_name='test definition type')),
                ('is_predefined', models.BooleanField(default=False, help_text='If true, uses specific questions linked below. If false, relies on configuration rules.', verbose_name='is predefined')),
                ('configuration', models.JSONField(blank=True, help_text='Template rules (e.g., num questions per subsection/skill) if not predefined.', null=True, verbose_name='dynamic configuration template')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('questions', models.ManyToManyField(blank=True, help_text="Specific questions included if 'is_predefined' is true.", related_name='predefined_tests', to='learning.question', verbose_name='specific questions')),
            ],
            options={
                'verbose_name': 'Test Definition',
                'verbose_name_plural': 'Test Definitions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserTestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_type', models.CharField(choices=[('level_assessment', 'Level Assessment'), ('practice', 'Practice Test'), ('simulation', 'Full Simulation')], db_index=True, help_text='The specific type of this test attempt instance.', max_length=20, verbose_name='attempt type')),
                ('test_configuration', models.JSONField(blank=True, help_text='Configuration used for this specific test instance (dynamic or custom).', null=True, verbose_name='test configuration snapshot')),
                ('question_ids', models.JSONField(default=list, help_text='Ordered list of question IDs included in this attempt.', verbose_name='question IDs')),
                ('status', models.CharField(choices=[('started', 'Started'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], db_index=True, default='started', max_length=15, verbose_name='status')),
                ('start_time', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('score_percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='overall score percentage')),
                ('score_verbal', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='verbal score percentage')),
                ('score_quantitative', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='quantitative score percentage')),
                ('results_summary', models.JSONField(blank=True, null=True, verbose_name='results summary')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('test_definition', models.ForeignKey(blank=True, help_text='The predefined Test template used for this attempt, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attempts', to='study.test', verbose_name='test definition used')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'User Test Attempt',
                'verbose_name_plural': 'User Test Attempts',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='UserQuestionAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1, null=True, verbose_name='selected answer')),
                ('is_correct', models.BooleanField(blank=True, null=True, verbose_name='is correct')),
                ('time_taken_seconds', models.PositiveIntegerField(blank=True, help_text='Time spent specifically on this question.', null=True, verbose_name='time taken (seconds)')),
                ('used_hint', models.BooleanField(default=False, verbose_name='used hint')),
                ('used_elimination', models.BooleanField(default=False, verbose_name='used elimination')),
                ('used_solution_method', models.BooleanField(default=False, verbose_name='used solution method')),
                ('mode', models.CharField(choices=[('traditional', 'Traditional Learning'), ('level_assessment', 'Level Assessment'), ('test', 'Practice Test/Simulation'), ('emergency', 'Emergency Mode'), ('conversation', 'Learning via Conversation'), ('challenge', 'Challenge')], db_index=True, help_text='The context in which the question was attempted.', max_length=20, verbose_name='mode')),
                ('attempted_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='attempted at')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_attempts', to='learning.question', verbose_name='question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('test_attempt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='study.usertestattempt', verbose_name='test attempt session')),
            ],
            options={
                'verbose_name': 'User Question Attempt',
                'verbose_name_plural': 'User Question Attempts',
                'ordering': ['-attempted_at'],
                'unique_together': {('user', 'question', 'test_attempt')},
            },
        ),
    ]
