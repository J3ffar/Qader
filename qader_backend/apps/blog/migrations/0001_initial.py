# Generated by Django 5.2 on 2025-04-24 13:20

import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('support', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(help_text='URL-friendly identifier (auto-generated if left blank).', max_length=255, unique=True, verbose_name='Slug')),
                ('content', models.TextField(help_text='Main content of the post (supports HTML/Markdown).', verbose_name='Content')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', max_length=20, verbose_name='Status')),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Published At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('author', models.ForeignKey(blank=True, help_text='The staff member who authored this post.', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Comma-separated tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogAdviceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_type', models.CharField(blank=True, help_text='Type of problem or topic user needs advice on.', max_length=255, null=True, verbose_name='Problem Type/Topic')),
                ('description', models.TextField(help_text='Detailed description of the issue/request.', verbose_name='Description')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('answered_support', 'Answered via Support'), ('answered_notification', 'Answered via Notification'), ('published_as_post', 'Published as Blog Post'), ('closed', 'Closed')], db_index=True, default='submitted', max_length=30, verbose_name='Status')),
                ('response_via', models.CharField(blank=True, choices=[('support', 'Admin Support Ticket'), ('notification', 'Platform Notification'), ('blog_post', 'Published Blog Post')], help_text='How the user was (or will be) answered.', max_length=20, null=True, verbose_name='Response Method')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('related_support_ticket', models.ForeignKey(blank=True, help_text='Link if this request was answered via a support ticket.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advice_requests', to='support.supportticket', verbose_name='Related Support Ticket')),
                ('user', models.ForeignKey(help_text='The user requesting advice.', on_delete=django.db.models.deletion.CASCADE, related_name='advice_requests', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('related_blog_post', models.ForeignKey(blank=True, help_text='Link if this request resulted in a published blog post.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_advice_requests', to='blog.blogpost', verbose_name='Related Blog Post')),
            ],
            options={
                'verbose_name': 'Blog Advice Request',
                'verbose_name_plural': 'Blog Advice Requests',
                'ordering': ['-created_at'],
            },
        ),
    ]
