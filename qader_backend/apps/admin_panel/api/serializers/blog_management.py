from rest_framework import serializers
from taggit.serializers import TagListSerializerField, TaggitSerializer
from django.conf import settings
from django.contrib.auth import get_user_model

from apps.blog.models import BlogPost, BlogAdviceRequest
from apps.support.models import SupportTicket  # Assuming this exists

User = get_user_model()


class AdminBlogPostSerializer(TaggitSerializer, serializers.ModelSerializer):
    """
    Admin Serializer for full CRUD operations on Blog Posts.
    Allows setting author, status, and other fields.
    """

    tags = TagListSerializerField(required=False)
    author = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.filter(is_staff=True),
        required=False,  # Allow unsetting or setting later
        allow_null=True,  # Allow posts not assigned to a specific staff member
        help_text="Select the staff member authoring this post.",
    )
    # Display author's username read-only for convenience
    author_username = serializers.CharField(
        source="author.username", read_only=True, required=False
    )
    # Use the model property for consistent display name
    author_display_name = serializers.CharField(read_only=True)

    class Meta:
        model = BlogPost
        fields = [
            "id",
            "author",
            "author_username",  # Read-only display field
            "author_display_name",  # Read-only display field
            "title",
            "slug",
            "content",
            "status",
            "published_at",  # Usually read-only, but admin might need to override
            "tags",
            "created_at",
            "updated_at",
        ]
        read_only_fields = [
            "id",
            "author_username",  # Display only
            "author_display_name",  # Display only
            "created_at",
            "updated_at",
            # Consider making 'published_at' read-only if auto-set is preferred
            # "published_at",
        ]
        extra_kwargs = {
            # Slug can be auto-generated by the model's save method if blank
            "slug": {"required": False, "allow_blank": True},
        }

    # Optional: Add validation if needed, e.g., ensure slug uniqueness if not auto-generated well
    # def validate_slug(self, value):
    #     # Add custom slug validation if model's save isn't sufficient
    #     return value


class AdminBlogAdviceRequestSerializer(serializers.ModelSerializer):
    """
    Admin Serializer for viewing and managing Blog Advice Requests.
    Allows updating status and linking related tickets/posts.
    """

    # Display user information read-only
    user_info = serializers.SerializerMethodField(read_only=True)
    # Allow admin to update status and linking fields
    related_support_ticket = serializers.PrimaryKeyRelatedField(
        queryset=SupportTicket.objects.all(),  # Adjust queryset if needed
        required=False,
        allow_null=True,
        help_text="Link to the support ticket used to answer this request.",
    )
    related_blog_post = serializers.PrimaryKeyRelatedField(
        queryset=BlogPost.objects.all(),  # Can link to any post
        required=False,
        allow_null=True,
        help_text="Link to the blog post published based on this request.",
    )

    class Meta:
        model = BlogAdviceRequest
        fields = [
            "id",
            "user",  # Keep the ID for reference, but display more info below
            "user_info",  # Read-only display field
            "problem_type",
            "description",
            "status",  # Writable by admin
            "response_via",  # Writable by admin
            "related_support_ticket",  # Writable by admin
            "related_blog_post",  # Writable by admin
            "created_at",
            "updated_at",
        ]
        read_only_fields = [
            "id",
            "user",  # Cannot change the user who submitted
            "user_info",
            "problem_type",  # Should not be changed by admin
            "description",  # Should not be changed by admin
            "created_at",
            "updated_at",
        ]

    def get_user_info(self, obj: BlogAdviceRequest) -> dict:
        """Provides basic, readable user information."""
        if obj.user:
            profile = getattr(obj.user, "profile", None)
            return {
                "id": obj.user.id,
                "username": obj.user.username,
                "email": getattr(obj.user, "email", None),  # Include email if available
                "preferred_name": (
                    getattr(profile, "preferred_name", None) if profile else None
                ),
            }
        return None
